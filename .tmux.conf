#
# ~/.tmux.conf
# Author: Gustavo Correia <gustavolcorreia@gmail.com>
# Source: https://github.com/gustavolcorreia/dotfiles/.tmux.conf
#

#######################################
#         General Settings            #
#######################################
set -sg escape-time 0                   # ** allows for faster key repetition **
set -g prefix C-a                                    # ** remap prefix to C-a **
set -g history-limit 1200000                          # ** history file limit **
set -g buffer-limit 20                         # ** set the number of buffers **
set -g display-time 1500              # ** time for which status line message **
set -g remain-on-exit off                         # ** window may be reactive **
set -g default-terminal "screen-256color"       # ** set the default terminal **
set -g repeat-time 300            # ** commads to be entered without bind-key **
set -g mouse on                                     # ** enable mouse support **
set -g default-shell /usr/bin/zsh              # ** specify the default shell **
set -g set-clipboard on
set -g base-index 1                                   # ** set the base index **
set -g set-titles on                  # ** term title reflect in tmux session **
set -g set-titles-string "#I:#w"
setw -g pane-base-index 1                   # ** set the base index for panes **
setw -g aggressive-resize on                        # ** much more reasonable **
setw -g allow-rename off              # ** don't rename windows automatically **
setw -g automatic-rename off           # ** control automatic window renaming **
setw -g mode-keys vi
#######################################
#               Keybinds              #
#######################################
unbind "\$"                                               # ** rename-session **
unbind ,                                                   # ** rename-window **
unbind %                                                 # ** split-window -h **
unbind '"'                                                  # ** split-window **
unbind }                                                    # ** swap-pane -D **
unbind {                                                    # ** swap-pane -U **
unbind [                                                    # ** paste-buffer **
unbind ]    
unbind "'"                                                 # ** select-window **
unbind n                                                     # ** next-window **
unbind p                                                 # ** previous-window **
unbind l                                                     # ** last-window **
unbind M-n                                        # ** next window with alert **
unbind M-p                                        # ** next window with alert **
unbind o                                                # ** focus thru panes **
unbind &                                                     # ** kill-window **
unbind "#"                                                   # ** list-buffer **
unbind =                                                   # ** choose-buffer **
unbind z                                                       # ** zoom-pane **
unbind M-Up                                             # ** resize 5 rows up **
unbind M-Down                                         # ** resize 5 rows down **
unbind M-Right                                       # ** resize 5 rows right **
unbind M-Left                                   # ** resize 5 rows left"'}'"' **

# ** change prefix-key to C-a  **  #
unbind C-b
bind a send-prefix             # ** send comands a TMUX session inside a TMUX **
bind c new-window -c "#{pane_current_path}"    # ** new window and retain cwd **
# ** prompt top rename windows right after it's created ** #
set-hook -g after-new-window 'command-prompt -I "#{window_name}"\
    "rename-window '%%'"'
# ** split panes and retain cwd  ** #
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
# ** rename session and window  **  #
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session-name}" "rename-session '%%'"
# ** reload tmux configuration  **  #
bind C-r source-file ~/.tmux.conf \; display "Reloading Tmux Config..."
# ** edit configuration and reload  **  #
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf &&\
    tmux source ~/.tmux.conf && tmux display \"Config reloaded\"'"
# ** change bind of ressurect plugin  ** #
set -g @resurrect-save 'S'
set -g @resurrect-restore C-l
# ** select panes and windows
bind -r C-[ previous-window
bind -r C-] next-window
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
bind -r Tab last-window
bind -r C-o swap-pane -D
bind -r < swap-window -t -1             # ** movement of windows with < and > **
bind -r > swap-window -t +1             # ** movement of windows with < and > **

# Swap panes back and forth with 1st pane
# When in main-(horizontalcal) layouts, the biggest/widest panel is always @1
bind \ if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# ** detach from session ** #
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# ** hide status bar on demand ** #
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'

# ** zoom pane  ** #
bind + resize-pane -Z

# ** link window ** #
bind L command-prompt -p "Link window from (session:window): "\
    "link-window -s %% -a"

bind -n C-Up copy-mode                                    # ** enter copy mode *

bind p paste-buffer
bind C-v run "xsel -o | tmux load-buffer - ; tmux paste-buffer"
bind C-p choose-buffer
# ** switch panes using alt-arrow  **  #
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D
# ** scroll up/down by 1 line, half screen, whole screen  **  #
bind -T copy-mode-vi M-Up       send-keys -X scroll-up
bind -T copy-mode-vi M-Down     send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp   send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown send-keys -X halfpage-down
bind -T copy-mode-vi PageDown   send-keys -X page-down
bind -T copy-mode-vi PageUp     send-keys -X page-up
# ** reduce number of scrolled rows per tick  **  #
bind -T copy-mode-vi WheelUpPane select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane select-pane \; send-keys -X -N 2 scroll-down

yank="~/.tmux/yank.sh"

# ** rewrite keybinding **  #
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi Y send-keys -X copy-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi D send-keys -X copy-end-of-line \;\
    run "tmux save-buffer - | $yank"
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel "$yank"
bind -T copy-mode-vi A send-keys -X append-selection-and-cancel \;\
    run "tmux save-buffer - | $yank"
# ** wrap default shell in reattach-to-user-namespace  **  #
if -b "command -v reattach-to-user-namespace > /dev/null 2>&1" \
    "run 'tmux set -g default-command \
    \"exec $(tmux show -gv default-shell)2>/dev/null & \
    reattach-to-user-namespace -l $(tmux show -gv default-shell)\"'"
# ** copy selection on drag end event  **  #
bind -T copy-mode-vi MouseDragEnd1Pane select-pane \;\
    send-keys -X copy-pipe "$yank"
bind -T copy-mode-vi MouseDown1Pane select-pane \;\
    send-keys -X clear-selection
# ** set UTF-8 ** #
if-shell "[ `tmux -V|cut -d' ' -f2` \\<2.2 ]" "\
    set-option -g status-utf8 on \;\
    set-window-option -g utf8 on \;\
    "

#######################################
#               Theme                 #
#######################################
# Feel free to NOT use this variables at all (remove, rename)
# this are named colors, just for convenience
color_orange="colour166" # 208, 166
color_purple="colour134" # 135, 134
color_green="colour076" # 070
color_blue="colour39"
color_yellow="colour220"
color_red="colour160"
color_black="colour232"
color_white="white" # 015

# This is a theme CONTRACT, you are required to define variables below
# Change values, but not remove/rename variables itself
color_dark="$color_black"
color_light="$color_white"
color_session_text="$color_blue"
color_status_text="colour245"
color_main="$color_orange"
color_secondary="$color_purple"
color_level_ok="$color_green"
color_level_warn="$color_yellow"
color_level_stress="$color_red"
color_window_off_indicator="colour088"
color_window_off_status_bg="colour238"
color_window_off_status_current_bg="colour254"
#######################################
#      Apparence and status bar       #
#######################################

set -g mode-style "fg=default,bg=$color_main"

# command line style
set -g message-style "fg=$color_main,bg=$color_dark"

# status line style
set -g status-style "fg=$color_status_text,bg=$color_dark"

# window segments in status line
set -g window-status-separator ""
separator_powerline_left=""
separator_powerline_right=""

# setw -g window-status-style "fg=$color_status_text,bg=$color_dark"
setw -g window-status-format " #I:#W "
setw -g window-status-current-style "fg=$color_light,bold,bg=$color_main"
setw -g window-status-current-format "#[fg=$color_dark,bg=$color_main]$separator_powerline_right#[default] #I:#W# #[fg=$color_main,bg=$color_dark]$separator_powerline_right#[default]"

# when window has monitoring notification
setw -g window-status-activity-style "fg=$color_main"

# outline for active pane
setw -g pane-active-border-style "fg=$color_main"

# general status bar settings
set -g status on
set -g status-interval 5
set -g status-position top
set -g status-justify left
set -g status-right-length 100

# define widgets we're going to use in status bar
# note, that this is not the complete list, some of them are loaded from plugins
wg_session="#[fg=$color_session_text] #S #[default]"
wg_date="#[fg=$color_secondary]%h %d %H:%M#[default]"
wg_user_host="#[fg=$color_secondary]#(whoami)#[default]@#H"
wg_is_zoomed="#[fg=$color_dark,bg=$color_secondary]#{?window_zoomed_flag,[Z],}#[default]"
# TODO: highlighted for nested local session as well
wg_is_keys_off="#[fg=$color_light,bg=$color_window_off_indicator]#([ $(tmux show-option -qv key-table) = 'off' ] && echo 'OFF')#[default]"

set -g status-left "$wg_session"
set -g status-right "#{prefix_highlight} $wg_is_keys_off $wg_is_zoomed $wg_user_host | $wg_date"

# Configure tmux-prefix-highlight colors
set -g @prefix_highlight_output_prefix '['
set -g @prefix_highlight_output_suffix ']'
set -g @prefix_highlight_fg "$color_dark"
set -g @prefix_highlight_bg "$color_secondary"
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr "fg=$color_dark,bg=$color_secondary"

#######################################
#  Nesting Local and remote sessions  #
#######################################

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote
# session we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session
#
# see: toggle on/off all keybindings
# Issue #237 · tmux/tmux - https://github.com/tmux/tmux/issues/237
#
# Also, change some visual styles when window keys are off

bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S

#######################################
#            Plugins config           #
#######################################

# ** tmux prefix highlight  ** #
set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow,bold'
################### ** Put your plugins after this line  ** ####################

    set -g @plugin 'tmux-plugins/tpm'
    set -g @plugin 'tmux-plugins/tmux-open'
    set -g @plugin 'tmux-plugins/tmux-yank'
    set -g @plugin 'tmux-plugins/tmux-copycat'
    set -g @plugin 'tmux-plugins/tmux-resurrect'
    set -g @plugin 'tmux-plugins/tmux-continuum'
    set -g @plugin 'tmux-pĺugins/tmux-prefix-highlight'

################## ** Put your plugins before this line  ** ####################

run -b '~/.tmux/plugins/tpm/tpm'
